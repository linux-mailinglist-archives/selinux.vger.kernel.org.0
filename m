Return-Path: <selinux-owner@vger.kernel.org>
X-Original-To: lists+selinux@lfdr.de
Delivered-To: lists+selinux@lfdr.de
Received: from out1.vger.email (out1.vger.email [IPv6:2620:137:e000::1:20])
	by mail.lfdr.de (Postfix) with ESMTP id 51AA8512C0A
	for <lists+selinux@lfdr.de>; Thu, 28 Apr 2022 08:54:35 +0200 (CEST)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S244625AbiD1G5Y (ORCPT <rfc822;lists+selinux@lfdr.de>);
        Thu, 28 Apr 2022 02:57:24 -0400
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:59820 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S239616AbiD1G5X (ORCPT
        <rfc822;selinux@vger.kernel.org>); Thu, 28 Apr 2022 02:57:23 -0400
Received: from us-smtp-delivery-124.mimecast.com (us-smtp-delivery-124.mimecast.com [170.10.133.124])
        by lindbergh.monkeyblade.net (Postfix) with ESMTP id A7801986D8
        for <selinux@vger.kernel.org>; Wed, 27 Apr 2022 23:54:09 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=redhat.com;
        s=mimecast20190719; t=1651128848;
        h=from:from:reply-to:subject:subject:date:date:message-id:message-id:
         to:to:cc:cc:mime-version:mime-version:
         content-transfer-encoding:content-transfer-encoding:
         in-reply-to:in-reply-to:references:references;
        bh=qYh2UpiXcDz+kzKDBrdeASsBkN1+PxOtmswS+LHS+Ng=;
        b=gPEjpMGLRTMOqrXDqeo/mviOv+z3swgSp6KVCVXfGxKEWLA7E1g4v5w+bwW/AGb96WjB6A
        dQVR+ul7ewTeaFhmP65VXwCSmzNsZpodWvcontwAdlsFzLHz1mJdEA3FsbFZQgVSzXENkZ
        +iwoxpQCA3b32BI8go5dOEYw2Vd1C5Q=
Received: from mimecast-mx02.redhat.com (mimecast-mx02.redhat.com
 [66.187.233.88]) by relay.mimecast.com with ESMTP with STARTTLS
 (version=TLSv1.2, cipher=TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384) id
 us-mta-484-1YbROI4-P9i0Kefl4LgWzA-1; Thu, 28 Apr 2022 02:54:07 -0400
X-MC-Unique: 1YbROI4-P9i0Kefl4LgWzA-1
Received: from smtp.corp.redhat.com (int-mx10.intmail.prod.int.rdu2.redhat.com [10.11.54.10])
        (using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
        (No client certificate requested)
        by mimecast-mx02.redhat.com (Postfix) with ESMTPS id 09163858EEC
        for <selinux@vger.kernel.org>; Thu, 28 Apr 2022 06:54:07 +0000 (UTC)
Received: from lacos-laptop-7.usersys.redhat.com (unknown [10.39.192.29])
        by smtp.corp.redhat.com (Postfix) with ESMTP id 1D8EF416385;
        Thu, 28 Apr 2022 06:54:05 +0000 (UTC)
From:   Laszlo Ersek <lersek@redhat.com>
To:     SELinux List <selinux@vger.kernel.org>,
        Laszlo Ersek <lersek@redhat.com>
Cc:     "Richard W.M. Jones" <rjones@redhat.com>,
        Petr Lautrbach <plautrba@redhat.com>
Subject: [PATCH for-3.5 4/5] selinux_restorecon: introduce SELINUX_RESTORECON_COUNT_ERRORS
Date:   Thu, 28 Apr 2022 08:53:53 +0200
Message-Id: <20220428065354.27605-5-lersek@redhat.com>
In-Reply-To: <20220428065354.27605-1-lersek@redhat.com>
References: <20220428065354.27605-1-lersek@redhat.com>
MIME-Version: 1.0
Content-Transfer-Encoding: base64
X-Scanned-By: MIMEDefang 2.85 on 10.11.54.10
X-Spam-Status: No, score=-1.6 required=5.0 tests=BAYES_00,DKIMWL_WL_HIGH,
        DKIM_SIGNED,DKIM_VALID,DKIM_VALID_AU,DKIM_VALID_EF,MIME_BASE64_TEXT,
        RCVD_IN_DNSWL_LOW,SPF_HELO_NONE,SPF_NONE autolearn=ham
        autolearn_force=no version=3.4.6
X-Spam-Checker-Version: SpamAssassin 3.4.6 (2021-04-09) on
        lindbergh.monkeyblade.net
Precedence: bulk
List-ID: <selinux.vger.kernel.org>
X-Mailing-List: selinux@vger.kernel.org

Q3VycmVudGx5LCBpZiB0aGUgU0VMSU5VWF9SRVNUT1JFQ09OX0FCT1JUX09OX0VSUk9SIGZsYWcg
aXMgY2xlYXIsIHRoZW4Kc2VsaW51eF9yZXN0b3JlY29uW19wYXJhbGxlbF0oKSBkb2VzIG5vdCBh
Ym9ydCB0aGUgZmlsZSB0cmVlIHdhbGsgdXBvbiBhbgplcnJvciwgYnV0IHRoZSBmdW5jdGlvbiBp
dHNlbGYgZmFpbHMgdGhlIHNhbWUsIHdpdGggdGhlIHNhbWUgKC0xKSByZXR1cm4KdmFsdWUuIFRo
aXMgaW4gdHVybiBpcyByZXBvcnRlZCBieSB0aGUgc2V0ZmlsZXMoOCkgdXRpbGl0eSB0byBpdHMg
cGFyZW50CnByb2Nlc3Mgd2l0aCB0aGUgc2FtZSBleGl0IGNvZGUgKDI1NSkuCgpJbiBsaWJndWVz
dGZzIHdlIHdhbnQgdG8gcHJvY2VlZCBhZnRlciBzZXRmaWxlcyg4KSBmYWlscyAqYXQgbW9zdCog
d2l0aApzdWNoIGVycm9ycyB0aGF0IG9jY3VyIGR1cmluZyB0aGUgZmlsZSB0cmVlIHdhbGsuIFdl
IG5lZWQgc2V0ZmlsZXMoOCkgdG8KZXhpdCB3aXRoIGEgZGlzdGluY3QgZXhpdCBzdGF0dXMgaW4g
dGhhdCBzaXR1YXRpb24uCgpGb3IgdGhpcywgaW50cm9kdWNlIHRoZSBTRUxJTlVYX1JFU1RPUkVD
T05fQ09VTlRfRVJST1JTIGZsYWcsIGFuZCB0aGUKY29ycmVzcG9uZGluZyBzZWxpbnV4X3Jlc3Rv
cmVjb25fZ2V0X3NraXBwZWRfZXJyb3JzKCkgZnVuY3Rpb24sIGZvcgpzZWxpbnV4X3Jlc3RvcmVj
b25bX3BhcmFsbGVsXSgpIHRvIGNvdW50LCBidXQgb3RoZXJ3aXNlIGlnbm9yZSwgZXJyb3JzCmR1
cmluZyB0aGUgZmlsZSB0cmVlIHdhbGsuIFdoZW4gbm8gb3RoZXIga2luZCBvZiBlcnJvciBvY2N1
cnMsIHRoZQpyZWxhYmVsaW5nIGZ1bmN0aW9ucyB3aWxsIHJldHVybiB6ZXJvLCBhbmQgdGhlIGNh
bGxlciBjYW4gZmV0Y2ggdGhlIG51bWJlcgpvZiBlcnJvcnMgaWdub3JlZCBkdXJpbmcgdGhlIGZp
bGUgdHJlZSB3YWxrIHdpdGgKc2VsaW51eF9yZXN0b3JlY29uX2dldF9za2lwcGVkX2Vycm9ycygp
LgoKSW1wb3J0YW50bHksIHdoZW4gYXQgbGVhc3Qgb25lIHN1Y2ggZXJyb3IgaXMgc2tpcHBlZCwg
d2UgZG9uJ3Qgd3JpdGUKcGFydGlhbCBtYXRjaCBkaWdlc3RzIGZvciBzdWJkaXJlY3Rvcmllcywg
YXMgYW55IG1hc2tlZCBlcnJvciBtZWFucyB0aGF0CmFueSBzdWJkaXJlY3RvcnkgbWF5IG5vdCBo
YXZlIGJlZW4gY29tcGxldGVseSByZWxhYmVsZWQuCgpDYzogIlJpY2hhcmQgVy5NLiBKb25lcyIg
PHJqb25lc0ByZWRoYXQuY29tPgpDYzogUGV0ciBMYXV0cmJhY2ggPHBsYXV0cmJhQHJlZGhhdC5j
b20+CkJ1Z3ppbGxhOiBodHRwczovL2J1Z3ppbGxhLnJlZGhhdC5jb20vc2hvd19idWcuY2dpP2lk
PTE3OTQ1MTgKU2lnbmVkLW9mZi1ieTogTGFzemxvIEVyc2VrIDxsZXJzZWtAcmVkaGF0LmNvbT4K
LS0tCiBsaWJzZWxpbnV4L2luY2x1ZGUvc2VsaW51eC9yZXN0b3JlY29uLmggICAgICAgICAgICAg
ICAgICAgICB8IDE1ICsrKysrKysrKwogbGlic2VsaW51eC9zcmMvc2VsaW51eF9yZXN0b3JlY29u
LmMgICAgICAgICAgICAgICAgICAgICAgICAgfCAzNCArKysrKysrKysrKysrKysrKy0tLQogbGli
c2VsaW51eC9tYW4vbWFuMy9zZWxpbnV4X3Jlc3RvcmVjb24uMyAgICAgICAgICAgICAgICAgICAg
fCAyMiArKysrKysrKysrKystCiBsaWJzZWxpbnV4L21hbi9tYW4zL3NlbGludXhfcmVzdG9yZWNv
bl9nZXRfc2tpcHBlZF9lcnJvcnMuMyB8IDI4ICsrKysrKysrKysrKysrKysKIGxpYnNlbGludXgv
c3JjL2xpYnNlbGludXgubWFwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIDUgKysr
CiA1IGZpbGVzIGNoYW5nZWQsIDk4IGluc2VydGlvbnMoKyksIDYgZGVsZXRpb25zKC0pCgpkaWZm
IC0tZ2l0IGEvbGlic2VsaW51eC9pbmNsdWRlL3NlbGludXgvcmVzdG9yZWNvbi5oIGIvbGlic2Vs
aW51eC9pbmNsdWRlL3NlbGludXgvcmVzdG9yZWNvbi5oCmluZGV4IDE4MjFhM2RjNTk2Yy4uYjEw
ZmU2ODRlZmY5IDEwMDY0NAotLS0gYS9saWJzZWxpbnV4L2luY2x1ZGUvc2VsaW51eC9yZXN0b3Jl
Y29uLmgKKysrIGIvbGlic2VsaW51eC9pbmNsdWRlL3NlbGludXgvcmVzdG9yZWNvbi5oCkBAIC0x
MjEsNiArMTIxLDExIEBAIGV4dGVybiBpbnQgc2VsaW51eF9yZXN0b3JlY29uX3BhcmFsbGVsKGNv
bnN0IGNoYXIgKnBhdGhuYW1lLAogICovCiAjZGVmaW5lIFNFTElOVVhfUkVTVE9SRUNPTl9DT05G
TElDVF9FUlJPUgkJMHgxMDAwMAogCisvKgorICogQ291bnQsIGJ1dCBvdGhlcndpc2UgaWdub3Jl
LCBlcnJvcnMgZHVyaW5nIHRoZSBmaWxlIHRyZWUgd2Fsay4KKyAqLworI2RlZmluZSBTRUxJTlVY
X1JFU1RPUkVDT05fQ09VTlRfRVJST1JTCQkJMHgyMDAwMAorCiAvKioKICAqIHNlbGludXhfcmVz
dG9yZWNvbl9zZXRfc2VoYW5kbGUgLSBTZXQgdGhlIGdsb2JhbCBmYyBoYW5kbGUuCiAgKiBAaG5k
bDogc3BlY2lmaWVzIGhhbmRsZSB0byBzZXQgYXMgdGhlIGdsb2JhbCBmYyBoYW5kbGUuCkBAIC0y
MDUsNiArMjEwLDE2IEBAIGV4dGVybiBpbnQgc2VsaW51eF9yZXN0b3JlY29uX3hhdHRyKGNvbnN0
IGNoYXIgKnBhdGhuYW1lLAogLyogRG8gbm90IHJlYWQgL3Byb2MvbW91bnRzLiAqLwogI2RlZmlu
ZSBTRUxJTlVYX1JFU1RPUkVDT05fWEFUVFJfSUdOT1JFX01PVU5UUwkJCTB4MDAwOAogCisvKiBz
ZWxpbnV4X3Jlc3RvcmVjb25fZ2V0X3NraXBwZWRfZXJyb3JzIC0gR2V0IHRoZSBudW1iZXIgb2Yg
ZXJyb3JzIGlnbm9yZWQKKyAqIGR1cmluZyByZS1sYWJlbGluZy4KKyAqCisgKiBJZiBTRUxJTlVY
X1JFU1RPUkVDT05fQ09VTlRfRVJST1JTIHdhcyBwYXNzZWQgdG8gc2VsaW51eF9yZXN0b3JlY29u
KDMpIG9yCisgKiBzZWxpbnV4X3Jlc3RvcmVjb25fcGFyYWxsZWwoMyksIGFuZCB0aGF0IGZ1bmN0
aW9uIHJldHVybmVkIHN1Y2Nlc3NmdWxseQorICogKGkuZS4sIHdpdGggYSB6ZXJvIHJldHVybiB2
YWx1ZSksIHRoZW4gdGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSBudW1iZXIgb2YKKyAqIGVycm9y
cyBpZ25vcmVkIGR1cmluZyB0aGUgZmlsZSB0cmVlIHdhbGsuCisgKi8KK2V4dGVybiBsb25nIHVu
c2lnbmVkIHNlbGludXhfcmVzdG9yZWNvbl9nZXRfc2tpcHBlZF9lcnJvcnModm9pZCk7CisKICNp
ZmRlZiBfX2NwbHVzcGx1cwogfQogI2VuZGlmCmRpZmYgLS1naXQgYS9saWJzZWxpbnV4L3NyYy9z
ZWxpbnV4X3Jlc3RvcmVjb24uYyBiL2xpYnNlbGludXgvc3JjL3NlbGludXhfcmVzdG9yZWNvbi5j
CmluZGV4IDcyZjRmYjQ2MmUzNC4uZTYxOTI5MTIwYTc0IDEwMDY0NAotLS0gYS9saWJzZWxpbnV4
L3NyYy9zZWxpbnV4X3Jlc3RvcmVjb24uYworKysgYi9saWJzZWxpbnV4L3NyYy9zZWxpbnV4X3Jl
c3RvcmVjb24uYwpAQCAtNjYsNiArNjYsOSBAQCBzdGF0aWMgcHRocmVhZF9tdXRleF90IHByb2dy
ZXNzX211dGV4ID0gUFRIUkVBRF9NVVRFWF9JTklUSUFMSVpFUjsKIHN0YXRpYyBzdHJ1Y3QgZGly
X3hhdHRyICpkaXJfeGF0dHJfbGlzdDsKIHN0YXRpYyBzdHJ1Y3QgZGlyX3hhdHRyICpkaXJfeGF0
dHJfbGFzdDsKIAorLyogTnVtYmVyIG9mIGVycm9ycyBpZ25vcmVkIGR1cmluZyB0aGUgZmlsZSB0
cmVlIHdhbGsuICovCitzdGF0aWMgbG9uZyB1bnNpZ25lZCBza2lwcGVkX2Vycm9yczsKKwogLyog
cmVzdG9yZWNvbl9mbGFncyBmb3IgcGFzc2luZyB0byByZXN0b3JlY29uX3NiKCkgKi8KIHN0cnVj
dCByZXN0X2ZsYWdzIHsKIAlib29sIG5vY2hhbmdlOwpAQCAtODMsNiArODYsNyBAQCBzdHJ1Y3Qg
cmVzdF9mbGFncyB7CiAJYm9vbCBpZ25vcmVfbm9lbnQ7CiAJYm9vbCB3YXJub25ub21hdGNoOwog
CWJvb2wgY29uZmxpY3RlcnJvcjsKKwlib29sIGNvdW50X2Vycm9yczsKIH07CiAKIHN0YXRpYyB2
b2lkIHJlc3RvcmVjb25faW5pdCh2b2lkKQpAQCAtODI3LDYgKzgzMSw3IEBAIHN0cnVjdCByZXN0
X3N0YXRlIHsKIAlzdHJ1Y3QgZGlyX2hhc2hfbm9kZSAqaGVhZCwgKmN1cnJlbnQ7CiAJYm9vbCBh
Ym9ydDsKIAlpbnQgZXJyb3I7CisJbG9uZyB1bnNpZ25lZCBza2lwcGVkX2Vycm9yczsKIAlpbnQg
c2F2ZWRfZXJybm87CiAJcHRocmVhZF9tdXRleF90IG11dGV4OwogfTsKQEAgLTk0OSwxMSArOTU0
LDE3IEBAIGxvb3BfYm9keToKIAkJCQkJZ290byB1bmxvY2s7CiAJCQl9CiAKLQkJCXN0YXRlLT5l
cnJvciB8PSBlcnJvcjsKIAkJCWZpcnN0ID0gZmFsc2U7Ci0JCQlpZiAoZXJyb3IgJiYgc3RhdGUt
PmZsYWdzLmFib3J0X29uX2Vycm9yKSB7Ci0JCQkJc3RhdGUtPmFib3J0ID0gdHJ1ZTsKLQkJCQln
b3RvIGZpbmlzaDsKKwkJCWlmIChlcnJvcikgeworCQkJCWlmIChzdGF0ZS0+ZmxhZ3MuYWJvcnRf
b25fZXJyb3IpIHsKKwkJCQkJc3RhdGUtPmVycm9yID0gZXJyb3I7CisJCQkJCXN0YXRlLT5hYm9y
dCA9IHRydWU7CisJCQkJCWdvdG8gZmluaXNoOworCQkJCX0KKwkJCQlpZiAoc3RhdGUtPmZsYWdz
LmNvdW50X2Vycm9ycykKKwkJCQkJc3RhdGUtPnNraXBwZWRfZXJyb3JzKys7CisJCQkJZWxzZQor
CQkJCQlzdGF0ZS0+ZXJyb3IgPSBlcnJvcjsKIAkJCX0KIAkJCWJyZWFrOwogCQl9CkBAIC0xMDA3
LDEyICsxMDE4LDE1IEBAIHN0YXRpYyBpbnQgc2VsaW51eF9yZXN0b3JlY29uX2NvbW1vbihjb25z
dCBjaGFyICpwYXRobmFtZV9vcmlnLAogCQkgICBTRUxJTlVYX1JFU1RPUkVDT05fSUdOT1JFX01P
VU5UUykgPyB0cnVlIDogZmFsc2U7CiAJc3RhdGUuaWdub3JlX2RpZ2VzdCA9IChyZXN0b3JlY29u
X2ZsYWdzICYKIAkJICAgIFNFTElOVVhfUkVTVE9SRUNPTl9JR05PUkVfRElHRVNUKSA/IHRydWUg
OiBmYWxzZTsKKwlzdGF0ZS5mbGFncy5jb3VudF9lcnJvcnMgPSAocmVzdG9yZWNvbl9mbGFncyAm
CisJCSAgICBTRUxJTlVYX1JFU1RPUkVDT05fQ09VTlRfRVJST1JTKSA/IHRydWUgOiBmYWxzZTsK
IAlzdGF0ZS5zZXRyZXN0b3JlY29uZGlnZXN0ID0gdHJ1ZTsKIAogCXN0YXRlLmhlYWQgPSBOVUxM
OwogCXN0YXRlLmN1cnJlbnQgPSBOVUxMOwogCXN0YXRlLmFib3J0ID0gZmFsc2U7CiAJc3RhdGUu
ZXJyb3IgPSAwOworCXN0YXRlLnNraXBwZWRfZXJyb3JzID0gMDsKIAlzdGF0ZS5zYXZlZF9lcnJu
byA9IDA7CiAKIAlzdHJ1Y3Qgc3RhdCBzYjsKQEAgLTEyMjUsOCArMTIzOSwxMSBAQCBzdGF0aWMg
aW50IHNlbGludXhfcmVzdG9yZWNvbl9jb21tb24oY29uc3QgY2hhciAqcGF0aG5hbWVfb3JpZywK
IAkvKgogCSAqIExhYmVsaW5nIHN1Y2Nlc3NmdWwuIFdyaXRlIHBhcnRpYWwgbWF0Y2ggZGlnZXN0
cyBmb3Igc3ViZGlyZWN0b3JpZXMuCiAJICogVE9ETzogV3JpdGUgZGlnZXN0IHVwb24gRlRTX0RQ
IGlmIG5vIGVycm9yIG9jY3VycyBpbiBpdHMgZGVzY2VudHMuCisJICogTm90ZTogd2UgY2FuJ3Qg
aWdub3JlIGVycm9ycyBoZXJlIHRoYXQgd2UndmUgbWFza2VkIGR1ZSB0bworCSAqIFNFTElOVVhf
UkVTVE9SRUNPTl9DT1VOVF9FUlJPUlMuCiAJICovCi0JaWYgKHN0YXRlLnNldHJlc3RvcmVjb25k
aWdlc3QgJiYgIXN0YXRlLmZsYWdzLm5vY2hhbmdlICYmICFlcnJvcikgeworCWlmIChzdGF0ZS5z
ZXRyZXN0b3JlY29uZGlnZXN0ICYmICFzdGF0ZS5mbGFncy5ub2NoYW5nZSAmJiAhZXJyb3IgJiYK
KwkgICAgc3RhdGUuc2tpcHBlZF9lcnJvcnMgPT0gMCkgewogCQljdXJyZW50ID0gc3RhdGUuaGVh
ZDsKIAkJd2hpbGUgKGN1cnJlbnQgIT0gTlVMTCkgewogCQkJaWYgKHNldHhhdHRyKGN1cnJlbnQt
PnBhdGgsCkBAIC0xMjQxLDYgKzEyNTgsOCBAQCBzdGF0aWMgaW50IHNlbGludXhfcmVzdG9yZWNv
bl9jb21tb24oY29uc3QgY2hhciAqcGF0aG5hbWVfb3JpZywKIAkJfQogCX0KIAorCXNraXBwZWRf
ZXJyb3JzID0gc3RhdGUuc2tpcHBlZF9lcnJvcnM7CisKIG91dDoKIAlpZiAoc3RhdGUuZmxhZ3Mu
cHJvZ3Jlc3MgJiYgc3RhdGUuZmxhZ3MubWFzc19yZWxhYmVsKQogCQlmcHJpbnRmKHN0ZG91dCwg
IlxyJXMgMTAwLjAlJVxuIiwgcGF0aG5hbWUpOwpAQCAtMTUyMCwzICsxNTM5LDggQEAgY2xlYW51
cDoKIAl9CiAJcmV0dXJuIC0xOwogfQorCitsb25nIHVuc2lnbmVkIHNlbGludXhfcmVzdG9yZWNv
bl9nZXRfc2tpcHBlZF9lcnJvcnModm9pZCkKK3sKKwlyZXR1cm4gc2tpcHBlZF9lcnJvcnM7Cit9
CmRpZmYgLS1naXQgYS9saWJzZWxpbnV4L21hbi9tYW4zL3NlbGludXhfcmVzdG9yZWNvbi4zIGIv
bGlic2VsaW51eC9tYW4vbWFuMy9zZWxpbnV4X3Jlc3RvcmVjb24uMwppbmRleCAzMzRkMjkzMGJi
NGYuLjIxOGFhZjZkMmFlNSAxMDA2NDQKLS0tIGEvbGlic2VsaW51eC9tYW4vbWFuMy9zZWxpbnV4
X3Jlc3RvcmVjb24uMworKysgYi9saWJzZWxpbnV4L21hbi9tYW4zL3NlbGludXhfcmVzdG9yZWNv
bi4zCkBAIC03OCw3ICs3OCwxMCBAQCBzcGVjZmlsZSBlbnRyaWVzIFNIQTEgZGlnZXN0LiBUaGUg
c3BlY2ZpbGUgZW50cmllcyBkaWdlc3Qgd2lsbCBiZSB3cml0dGVuIHRvIHRoZQogLklSIHNlY3Vy
aXR5LnNlaGFzaAogZXh0ZW5kZWQgYXR0cmlidXRlIG9uY2UgcmVsYWJlbGluZyBoYXMgYmVlbiBj
b21wbGV0ZWQgc3VjY2Vzc2Z1bGx5IHByb3ZpZGVkIHRoZQogLkIgU0VMSU5VWF9SRVNUT1JFQ09O
X05PQ0hBTkdFCi1mbGFnIGhhcyBub3QgYmVlbiBzZXQuCitmbGFnIGhhcyBub3QgYmVlbiBzZXQs
IGFuZCBubyBlcnJvcnMgaGF2ZSBiZWVuIHNraXBwZWQgZHVyaW5nIHRoZSBmaWxlIHRyZWUgd2Fs
aworZHVlIHRvIHRoZQorLkIgU0VMSU5VWF9SRVNUT1JFQ09OX0NPVU5UX0VSUk9SUworZmxhZy4K
IC5zcAogLkIgU0VMSU5VWF9SRVNUT1JFQ09OX05PQ0hBTkdFCiBkb24ndCBjaGFuZ2UgYW55IGZp
bGUgbGFiZWxzIChwYXNzaXZlIGNoZWNrKSBvciB1cGRhdGUgdGhlIGRpZ2VzdCBpbiB0aGUKQEAg
LTE2NCw2ICsxNjcsMjEgQEAgb24gYSBkaXJlY3RvcnkgYmVsb3cgdGhpcy4KIC5CIFNFTElOVVhf
UkVTVE9SRUNPTl9DT05GTElDVF9FUlJPUgogdG8gdHJlYXQgY29uZmxpY3Rpbmcgc3BlY2lmaWNh
dGlvbnMsIHN1Y2ggYXMgd2hlcmUgdHdvIGhhcmRsaW5rcyBmb3IgdGhlCiBzYW1lIGlub2RlIGhh
dmUgZGlmZmVyZW50IGNvbnRleHRzLCBhcyBlcnJvcnMuCisuc3AKKy5CIFNFTElOVVhfUkVTVE9S
RUNPTl9DT1VOVF9FUlJPUlMKK0NvdW50LCBidXQgb3RoZXJ3aXNlIGlnbm9yZSwgZXJyb3JzIGR1
cmluZyB0aGUgZmlsZSB0cmVlIHdhbGsuIE9ubHkgbWFrZXMgYQorZGlmZmVyZW5jZSBpZiB0aGUK
Ky5CIFNFTElOVVhfUkVTVE9SRUNPTl9BQk9SVF9PTl9FUlJPUgorZmxhZyBpcyBjbGVhci4gQ2Fs
bAorLkJSIHNlbGludXhfcmVzdG9yZWNvbl9nZXRfc2tpcHBlZF9lcnJvcnMgKDMpCitmb3IgZmV0
Y2hpbmcgdGhlIGlnbm9yZWQgKHNraXBwZWQpIGVycm9yIGNvdW50IGFmdGVyCisuQlIgc2VsaW51
eF9yZXN0b3JlY29uICgzKQorb3IKKy5CUiBzZWxpbnV4X3Jlc3RvcmVjb25fcGFyYWxsZWwgKDMp
Citjb21wbGV0ZXMgd2l0aCBzdWNjZXNzLiBJbiBjYXNlIGFueSBlcnJvcnMgd2VyZSBza2lwcGVk
IGR1cmluZyB0aGUgZmlsZSB0cmVlCit3YWxrLCB0aGUgc3BlY2ZpbGUgZW50cmllcyBTSEExIGRp
Z2VzdCB3aWxsIG5vdCBoYXZlIGJlZW4gd3JpdHRlbiB0byB0aGUKKy5JUiBzZWN1cml0eS5zZWhh
c2gKK2V4dGVuZGVkIGF0dHJpYnV0ZS4KIC5SRQogLnNwCiBUaGUgYmVoYXZpb3IgcmVnYXJkaW5n
IHRoZSBjaGVja2luZyBhbmQgdXBkYXRpbmcgb2YgdGhlIFNIQTEgZGlnZXN0IGRlc2NyaWJlZApA
QCAtMjc5LDYgKzI5Nyw4IEBAIG9wdGlvbi4KIC5icgogLkJSIHNlbGludXhfcmVzdG9yZWNvbl9k
ZWZhdWx0X2hhbmRsZSAoMyksCiAuYnIKKy5CUiBzZWxpbnV4X3Jlc3RvcmVjb25fZ2V0X3NraXBw
ZWRfZXJyb3JzICgzKSwKKy5icgogLkJSIHNlbGludXhfcmVzdG9yZWNvbl9zZXRfZXhjbHVkZV9s
aXN0ICgzKSwKIC5icgogLkJSIHNlbGludXhfcmVzdG9yZWNvbl9zZXRfYWx0X3Jvb3RwYXRoICgz
KSwKZGlmZiAtLWdpdCBhL2xpYnNlbGludXgvbWFuL21hbjMvc2VsaW51eF9yZXN0b3JlY29uX2dl
dF9za2lwcGVkX2Vycm9ycy4zIGIvbGlic2VsaW51eC9tYW4vbWFuMy9zZWxpbnV4X3Jlc3RvcmVj
b25fZ2V0X3NraXBwZWRfZXJyb3JzLjMKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAw
MDAwMDAwLi5kMTc1N2I3NjEyYWIKLS0tIC9kZXYvbnVsbAorKysgYi9saWJzZWxpbnV4L21hbi9t
YW4zL3NlbGludXhfcmVzdG9yZWNvbl9nZXRfc2tpcHBlZF9lcnJvcnMuMwpAQCAtMCwwICsxLDI4
IEBACisuVEggInNlbGludXhfcmVzdG9yZWNvbl9nZXRfc2tpcHBlZF9lcnJvcnMiICIzIiAiMjcg
QXByIDIwMjIiICJTZWN1cml0eSBFbmhhbmNlZCBMaW51eCIgIlNFTGludXggQVBJIGRvY3VtZW50
YXRpb24iCisKKy5TSCAiTkFNRSIKK3NlbGludXhfcmVzdG9yZWNvbl9nZXRfc2tpcHBlZF9lcnJv
cnMgXC0gZ2V0IHRoZSBudW1iZXIgb2YgZXJyb3JzIGlnbm9yZWQgYnkKKy5CUiBzZWxpbnV4X3Jl
c3RvcmVjb24gKDMpCitvcgorLkJSIHNlbGludXhfcmVzdG9yZWNvbl9wYXJhbGxlbCAoMykKK2R1
cmluZyB0aGUgZmlsZSB0cmVlIHdhbGsKKy4KKy5TSCAiU1lOT1BTSVMiCisuQiAjaW5jbHVkZSA8
c2VsaW51eC9yZXN0b3JlY29uLmg+Cisuc3AKKy5CSSAibG9uZyB1bnNpZ25lZCBzZWxpbnV4X3Jl
c3RvcmVjb25fZ2V0X3NraXBwZWRfZXJyb3JzKHZvaWQpOyIKKy5pbiArXHcnbG9uZyB1bnNpZ25l
ZCBzZWxpbnV4X3Jlc3RvcmVjb25fZ2V0X3NraXBwZWRfZXJyb3JzKCd1CisuCisuU0ggIkRFU0NS
SVBUSU9OIgorSWYKKy5CIFNFTElOVVhfUkVTVE9SRUNPTl9DT1VOVF9FUlJPUlMKK3dhcyBwYXNz
ZWQgdG8KKy5CUiBzZWxpbnV4X3Jlc3RvcmVjb24gKDMpCitvcgorLkJSIHNlbGludXhfcmVzdG9y
ZWNvbl9wYXJhbGxlbCAoMykKK2FuZCB0aGF0IGZ1bmN0aW9uIHJldHVybmVkIHN1Y2Nlc3NmdWxs
eSAoaS5lLiwgd2l0aCBhIHplcm8gcmV0dXJuIHZhbHVlKSwgdGhlbgorLkJSIHNlbGludXhfcmVz
dG9yZWNvbl9nZXRfc2tpcHBlZF9lcnJvcnMgKCkKK3JldHVybnMgdGhlIG51bWJlciBvZiBlcnJv
cnMgaWdub3JlZCBkdXJpbmcgdGhlIGZpbGUgdHJlZSB3YWxrLgorLgorLlNIICJTRUUgQUxTTyIK
Ky5CUiBzZWxpbnV4X3Jlc3RvcmVjb24gKDMpCmRpZmYgLS1naXQgYS9saWJzZWxpbnV4L3NyYy9s
aWJzZWxpbnV4Lm1hcCBiL2xpYnNlbGludXgvc3JjL2xpYnNlbGludXgubWFwCmluZGV4IDRhY2Yx
Y2FhY2I1NS4uNDM2MzFmMDk2NWZlIDEwMDY0NAotLS0gYS9saWJzZWxpbnV4L3NyYy9saWJzZWxp
bnV4Lm1hcAorKysgYi9saWJzZWxpbnV4L3NyYy9saWJzZWxpbnV4Lm1hcApAQCAtMjQ1LDMgKzI0
NSw4IEBAIExJQlNFTElOVVhfMy40IHsKICAgZ2xvYmFsOgogICAgIHNlbGludXhfcmVzdG9yZWNv
bl9wYXJhbGxlbDsKIH0gTElCU0VMSU5VWF8xLjA7CisKK0xJQlNFTElOVVhfMy41IHsKKyAgZ2xv
YmFsOgorICAgIHNlbGludXhfcmVzdG9yZWNvbl9nZXRfc2tpcHBlZF9lcnJvcnM7Cit9IExJQlNF
TElOVVhfMy40OwotLSAKMi4xOS4xLjMuZzMwMjQ3YWE1ZDIwMQoKCg==

